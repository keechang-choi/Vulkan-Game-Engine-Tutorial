#version 450

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParmeterUBO {
    float deltaTime;
} ubo;

layout (std140, binding = 1) readonly buffer ParticleSSBOIn {
    Particle particlesIn[ ];
};

layout (std140, binding = 2) buffer ParticleSSBOOout {
    Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main(){
    uint index = gl_GlobalInvocationID.x;

    Particle particleIn = particlesIn[index];

    particlesOut[index].position = particleIn.position + particleIn.velocity * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;

    // window border flip 
    // NOTE: fix keeping flipping.
    vec2 absVelocity = vec2(abs(particlesOut[index].velocity.x), abs(particlesOut[index].velocity.y));

    if (particlesOut[index].position.x <= -1.0) {
        particlesOut[index].velocity.x = absVelocity.x;
    }else if(particlesOut[index].position.x >= 1.0){
        particlesOut[index].velocity.x = -absVelocity.x;
    }

    if (particlesOut[index].position.y <= -1.0) {
        particlesOut[index].velocity.y = absVelocity.y;
    }else if(particlesOut[index].position.y >= 1.0){
        particlesOut[index].velocity.y = -absVelocity.y;
    }
}